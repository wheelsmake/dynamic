{"version":3,"file":"dynamic.min.js","mappings":"mBAKO,SAASA,EAAEC,EAAWC,GACtBA,IAAUC,WAAeD,aAAiBE,UAAUF,EAAQG,UAC3D,IAAIC,EAAcJ,EAAMK,iBAAiBN,GACzC,OAAIK,EAAEE,OAES,GAAZF,EAAEE,QAAeP,EAAEQ,MAAM,eAAuBH,EAAE,GACzCI,MAAMC,KAAKL,GAHF,EAI7B,CCoBO,SAASM,EAAEC,EAAkBC,EAAeC,EAAaC,GAC5D,MAAGH,IAAaV,UAAiB,IAAIc,MAAM,sBAEvCC,QAAQC,MAAM,uBAAwBN,EAAU,QAASC,EAAM,SAAUC,EAAO,UAAWC,GACrF,IAAIC,MAAM,aAAaJ,MAAaC,EAAO,mBAAmBA,IAAS,eAAeE,EAAS,aAAaA,IAAW,KAAKD,EAAQ,SAASA,IAAU,OAErK,C,8vBC3Bc,eAAgBK,QAAWA,OAAqBC,WAI9D,MAAMC,EAKFC,YAAYC,G,YAJZ,mBACA,mBACA,WAAmB,CAAC,GACpB,WAAyB,CAAC,GAEtB,EAAAC,KAAI,ECfL,SAAyBC,GAC5B,GAAGA,aAAiBtB,QAAS,OAAOsB,EAC/B,GAAmB,iBAATA,EAAkB,CAC7B,MAAMC,EAAK,EAAgBD,GAC3B,GAAGC,aAAcC,KAAM,OAAOD,EACzB,EAAgB,WAAY,mBAAoBD,EAAO,0C,MAE3D,EAAgB,WAAY,mBAAoBA,EAAO,kDAChE,CDOyB,CAAgCF,GAAU,KAE3D,EAAAC,KAAI,SAAc,KAAlBA,KAAmB,EAAAA,KAAI,QAEvB,EAAAA,KAAI,EAAU,IAAII,MAAM,EAAAJ,KAAI,OAAQ,CAEhCK,IAAIC,EAAWC,EAAUC,GAEzB,EACAC,IAAIH,EAAWC,EAAUG,EAAUF,GAc/B,MAbsB,iBAAZD,EAAsB,EAAgBA,EAASI,WAAY,SAAUJ,EAAU,8CAGlFA,KAAYD,IAMXA,EAAUC,GAAYG,GAIvBE,QAAQH,IAAIH,EAAWC,EAAUG,EAAUF,EACtD,EAYAK,eAAeP,EAAWC,GAEtB,OAAOK,QAAQC,eAAeP,EAAWC,EAC7C,IACF,IACN,CACIR,eAAW,OAAO,EAAAC,KAAI,MAAW,CACjCc,WAAO,OAAO,EAAAd,KAAI,MAAQ,E,iFAChBe,GACV,GAAGA,EAAKC,YAAY,CAChB,MAAMC,EAAU,IAAIF,EAAKC,YAAYE,SAAS,eAE9C,GAAGD,EAAQlC,OAAS,EAAG,IAAI,IAAIoC,EAAI,EAAGA,EAAIF,EAAQlC,OAAQoC,IAAI,CAC5CF,EAAQE,GAAGC,MAAaH,EAAQE,GAAG,GAAGE,UAAU,EAAGJ,EAAQE,GAAG,GAAGpC,OAAS,E,EAIhG,MAAMuC,EAAQP,EAAKQ,WAGnB,IAAI,IAAIJ,EAAI,EAAGA,EAAIG,EAAMvC,OAAQoC,KAKjC,IAAI,IAAIA,EAAI,EAAGA,EAAIJ,EAAKS,WAAWzC,OAAQoC,KAG/C,EAGJ,MAAMM,EAAU,CACZC,MAAI3B,GACA,OAAO,IAAIF,EAAIE,EACnB,EACA4B,IAAK,CAAC,EAGNC,GAAI,CAAC,IDnEF,SAASC,EAAYC,GACxBC,OAAOC,OAAOF,GACd,IAAI,IAAIX,EAAI,EAAGA,EAAIY,OAAOE,KAAKH,GAAK/C,OAAQoC,IAA2C,iBAA5BW,EAAIC,OAAOE,KAAKH,GAAKX,KAAiBU,EAAYC,EAAIC,OAAOE,KAAKH,GAAKX,IACtI,CCuEA,CAA0BM,GAC1B,UEjGAM,OAAOG,eAAevC,OAAQ,UAAW,CACrCwC,cAAc,EACdC,UAAU,EACVC,YAAY,EACZ/C,MAAO,G","sources":["webpack:///../utils/element.ts","webpack:///../utils/generic.ts","webpack:///./src/dynamic.ts","webpack:///../utils/arguments.ts","webpack:///./src/dynamic.export.ts"],"sourcesContent":["/* utils\r\n * ©2022 LJM12914. https://github.com/wheelsmake/utils\r\n * Licensed under MIT License. https://github.com/wheelsmake/utils/blob/main/LICENSE\r\n*/\r\nimport * as utils from \"./index\";\r\nexport function e(s :string, scope? :Element | Document) :Node[] | Node{\r\n    if(scope === undefined || !(scope instanceof Element)) scope = document;\r\n        let a :NodeList = scope.querySelectorAll(s);\r\n        if(!a.length) return [];\r\n        //note:当一个页面存在相同ID元素时不会走这里，而会返回数组，因为说好了是querySelectorAll了并且本来就不应该有重复ID，不能怪我啊\r\n        if(a.length == 1 && s.match(/^.*#[^\\s]*$/)) return a[0];\r\n        else return Array.from(a);\r\n}\r\nexport function isDescendant(possibleDescendant :Element, possibleParent :Element) :boolean{\r\n    while(possibleDescendant.tagName != \"HTML\"){\r\n        possibleDescendant = possibleDescendant.parentNode! as Element;\r\n        if(possibleDescendant === possibleParent) return true; \r\n    }\r\n    return false;\r\n}\r\nexport function isInDocument(element :Element) :boolean{\r\n    return isDescendant(element, (e(\"html\") as Node[])[0] as Element);\r\n}\r\nexport function isChild(element :Element, target :Element) :boolean{\r\n    const children = target.childNodes;\r\n    for(let i = 0; i < children.length; i++) if(element === children[i]) return true;\r\n    return false;\r\n}\r\nexport function toHTML(HTML :string) :Node[]{\r\n    if(HTML === \"\" || typeof HTML != \"string\") utils.generic.E(\"HTML\", \"string\", HTML);\r\n    const ele = document.createElement(\"div\");\r\n    ele.innerHTML = HTML;\r\n    return getInnerNodes(ele);\r\n}\r\nexport function getInnerNodes(el :Node | Element) :Node[]{\r\n    var nodes :Node[] = [];\r\n    for(let i = 0; i < el.childNodes.length; i++) nodes[i] = el.childNodes[i].cloneNode(true);\r\n    return nodes;\r\n}\r\n//剥壳器\r\nexport function hatch(element :Element, remove? :boolean) :Node[]{\r\n    //note:Nodelist类型会实时同步造成不稳定的for循环，必须转换为Node[]！\r\n    const par = element.parentElement!, children :Node[] = Array.from(element.childNodes);\r\n    for(let i = 0; i < children.length; i++) par.insertBefore(children[i], element);\r\n    if(remove === true) element.remove();\r\n    return children;\r\n}\r\n//fixme:这个方法特异性太强了吧，能不能不要放在这里？\r\n//最终渲染方法，老祖宗求你别出bug\r\nexport function render(HTML :string | Element | HTMLCollection | Element[] | Node | NodeList | Node[], element :Element, insertAfter? :boolean, append? :boolean, disableDF? :boolean) :Node[]{\r\n    if(element.parentElement === null) utils.generic.EE(\"cannot render by '<html>' element, since it's root of document.\");\r\n    var html :Node[] = [];\r\n    if(typeof HTML == \"string\") html = toHTML(HTML);\r\n    else if(HTML instanceof Element || HTML instanceof Node) html[0] = HTML.cloneNode(true);\r\n    else if(HTML instanceof HTMLCollection || HTML instanceof NodeList) for(let i = 0; i < HTML.length; i++) html[i] = HTML.item(i)!.cloneNode(true);\r\n    else html = HTML;\r\n    const Rhtml = [...html].reverse(), parent = element.parentElement;\r\n    if(append === true) for(let i = 0; i < html.length; i++) element.append(html[i]);\r\n    else if(append === false) for(let i = 0; i < Rhtml.length; i++) element.prepend(Rhtml[i]);\r\n    else if(insertAfter === true){\r\n        if(!element.nextSibling) for(let i = 0; i < Rhtml.length; i++) parent!.append(Rhtml[i]);\r\n        else for(let i = 0; i < Rhtml.length; i++) parent!.insertBefore(Rhtml[i], element.nextSibling);\r\n    }\r\n    else if(insertAfter === false) for(let i = 0; i < html.length; i++) parent!.insertBefore(html[i], element);\r\n    else for(let i = 0; i < html.length; i++) element.append(html[i]);\r\n    //todo:加入作用域\r\n    return html;\r\n}","/* utils\r\n * ©2022 LJM12914. https://github.com/wheelsmake/utils\r\n * Licensed under MIT License. https://github.com/wheelsmake/utils/blob/main/LICENSE\r\n*/\r\nimport * as utils from \"./index\";\r\nexport function randoma2Z(length :number) :string{ //52\r\n    var s :string = \"\";\r\n    for(let i = 0; i < length; i++){\r\n        let r = Math.floor(Math.random() * 52);\r\n        if(r > 25) s += String.fromCharCode(r + 71);\r\n        else s += String.fromCharCode(r + 65);\r\n    }\r\n    return s;\r\n}\r\nexport function randoma2z029(length :number) :string{ //36\r\n    var s :string = \"\";\r\n    for(let i = 0; i < length; i++){\r\n        let r = Math.floor(Math.random() * 36);\r\n        if(r < 10) s += r;\r\n        else s += String.fromCharCode(r + 87);\r\n    }\r\n    return s;\r\n}\r\nexport function precisePop(ele :any, array :any[]) :any | null{\r\n    if(array.indexOf(ele) === -1) return null;\r\n    return array.splice(array.indexOf(ele), 1)[0];\r\n}\r\n//递归冻结对象\r\nexport function constantize(obj :anyObject) :void{\r\n    Object.freeze(obj);\r\n    for(let i = 0; i < Object.keys(obj).length; i++) if(typeof obj[Object.keys(obj)[i]] == \"object\") constantize(obj[Object.keys(obj)[i]]);\r\n}\r\nexport function E(argument :string, type? :string, value? :any, reason? :string) :never{\r\n    if(argument === undefined) throw new Error(\"An error occured.\");\r\n    else{\r\n        console.error(\"ERROR INFO: argument\", argument, \",type\", type, \",value\", value, \",reason\", reason); //为了拿到真正的value，其他类型toString后啥信息都没了\r\n        throw new Error(`Argument '${argument}' ${type ? `should be a(an) ${type}` : \"is invalid\"}${reason ? `, reason: ${reason}` : \"\"}${value ? `, got ${value}` : \"\"}.`);\r\n    }\r\n}\r\nexport function EE(message :any) :never{throw new Error(message);}\r\nexport function repeat(item :any, count :number) :any[]{\r\n    if(typeof count != \"number\" || count < 1) utils.generic.E(\"count\", \"number smaller than 1\", count);\r\n    var arr :any[] = [];\r\n    arr[count - 1] = \" \";\r\n    return arr.fill(item, 0, count);\r\n}","/* dynamic\r\n * ©2022 LJM12914. https://github.com/wheelsmake/dynamic\r\n * Licensed under MIT License. https://github.com/wheelsmake/dynamic/blob/main/LICENSE\r\n*/\r\nimport * as utils from \"../../utils/index\";\r\nimport * as localUtils from \"./utils/index\";\r\n\r\n//开发模式\r\nconsole.info(\r\n`dynamic(dnJS) ©LJM12914. https://github.com/wheelsmake/dynamic\r\nYou are using the unminified build of dynamic. Make sure to use the minified build for production.`);\r\nconst isDEV = \"__dn_DEV__\" in window && (window as anyObject).__dn_DEV__ === true;\r\n\r\n\r\n//主类\r\nclass App{\r\n    #rootNode :Element;\r\n    #proxy :anyObject;\r\n    #data :anyObject = {};\r\n    #dataDesc :depenObject = {};\r\n    constructor(rootNode :Elementy){\r\n        this.#rootNode = utils.arguments.reduceToElement(rootNode)!;\r\n        console.info(\"creating new dynamic instance with rootNode\", rootNode);\r\n        this.#detectInsert(this.#rootNode);\r\n        //proxy本身没有不可变性，必须再用一个data伪只读属性保护\r\n        this.#proxy = new Proxy(this.#data, {\r\n            //note:sharpData === this.#data\r\n            get(sharpData, property, proxy){\r\n                console.log(\"get\", property);\r\n            },\r\n            set(sharpData, property, newValue, proxy){\r\n                if(typeof property == \"symbol\") utils.generic.E(property.toString(), \"string\", property, \"index of Dynamic.data must not be a Symbol\");\r\n                else{\r\n                    console.log(\"set\", property, newValue);\r\n                    if(property in sharpData){\r\n                        //todo:更新依赖\r\n                    \r\n                    }\r\n                    else{\r\n                        //todo:新建属性\r\n                        sharpData[property] = newValue;\r\n\r\n                    }\r\n                }\r\n                return Reflect.set(sharpData, property, newValue, proxy);\r\n            },\r\n            /*has(sharpData, property){\r\n                console.log(arguments);\r\n                return false;\r\n            },*/\r\n            //这里只会在Object.defineProperty走到，别听MDN的https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy/Proxy/defineProperty#:~:text=proxy.property%3D%27value%27\r\n            //只要警告他们不要用Object.defineProperty往data里扔东西就好了\r\n            /*defineProperty(sharpData, property, options){\r\n                console.log(property, options);\r\n                console.log(arguments);\r\n                return true;\r\n            },*/\r\n            deleteProperty(sharpData, property){\r\n                //todo:取消变量关联，如果导致了断链，那么进行永久缓存并警告开发者\r\n                return Reflect.deleteProperty(sharpData, property);\r\n            }\r\n        });\r\n    }\r\n    get rootNode(){return this.#rootNode;}\r\n    get data(){return this.#proxy;}\r\n    #detectInsert(node :Element) :void{\r\n        if(node.textContent){\r\n            const inserts = [...node.textContent.matchAll(/::[^:]+::/g)];\r\n            //没有匹配到则为null，匹配到则[n]为::example::\r\n            if(inserts.length > 0) for(let i = 0; i < inserts.length; i++){\r\n                const index = inserts[i].index, str = inserts[i][0].substring(2, inserts[i][0].length - 2);\r\n                //note:str可能是指令！\r\n            }\r\n        }\r\n        const attrs = node.attributes;\r\n        //别写in，否则出一大堆方法\r\n        //NameNodeMap可以用数组那套，NameNodeMap.length返回的是正确的长度\r\n        for(let i = 0; i < attrs.length; i++){\r\n            //todo:检查属性名和属性值\r\n\r\n        }\r\n        //进入子节点\r\n        for(let i = 0; i < node.childNodes.length; i++){\r\n            //todo:递归\r\n        }\r\n    }\r\n}\r\n\r\nconst Dynamic = {\r\n    new(rootNode :Elementy){\r\n        return new App(rootNode);\r\n    },\r\n    SPA: {\r\n\r\n    },\r\n    SW: {\r\n\r\n    },\r\n\r\n}\r\n\r\n//对象导出\r\nutils.generic.constantize(Dynamic);\r\nexport default Dynamic;","/* utils\r\n * ©2022 LJM12914. https://github.com/wheelsmake/utils\r\n * Licensed under MIT License. https://github.com/wheelsmake/utils/blob/main/LICENSE\r\n*/\r\nimport * as utils from \"./index\";\r\n/**一定会返回Element，void为报错hack*/\r\nexport function reduceToElement(input :Elementy) :Element | void{\r\n    if(input instanceof Element) return input;\r\n    else if(typeof input == \"string\"){\r\n        const el = utils.element.e(input);\r\n        if(el instanceof Node) return el as Element;\r\n        else utils.generic.E(\"rootNode\", \"string | Element\", input, \"rootNode should be a VALID #id selector\"); //fixed:现在不会走到new Element()那儿了\r\n    }\r\n    else utils.generic.E(\"rootNode\", \"string | Element\", input, \"rootNode should be a #id selector or an Element\");\r\n}","/* dynamic\r\n * ©2022 LJM12914. https://github.com/wheelsmake/dynamic\r\n * Licensed under MIT License. https://github.com/wheelsmake/dynamic/blob/main/LICENSE\r\n*/\r\nimport Dynamic from \"./dynamic\";\r\n//fixed:当作模块使用的时候不需要弄到全局作用域，所以将这个东西抽出来了\r\nObject.defineProperty(window, \"Dynamic\", {\r\n    configurable: false,\r\n    writable: false,\r\n    enumerable: true,\r\n    value: Dynamic\r\n});"],"names":["e","s","scope","undefined","Element","document","a","querySelectorAll","length","match","Array","from","E","argument","type","value","reason","Error","console","error","window","__dn_DEV__","App","constructor","rootNode","this","input","el","Node","Proxy","get","sharpData","property","proxy","set","newValue","toString","Reflect","deleteProperty","data","node","textContent","inserts","matchAll","i","index","substring","attrs","attributes","childNodes","Dynamic","new","SPA","SW","constantize","obj","Object","freeze","keys","defineProperty","configurable","writable","enumerable"],"sourceRoot":""}